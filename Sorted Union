//Unfinished, unable to solve =.=
function uniteUnique(arr) {
  var insideArray=[];
  var argument=Array.from(arguments);

    
    for(var i =0 ;i<argument.length;i++){
        for(var j=i+1;j<argument.length;j++){
          if(i+j>=argument.length){
            break;
          }
          var next=[...argument[i+j]];
          
        var tempArray=next.filter((x)=>{
          console.log(argument[i]);
          console.log("---");
          console.log(x);
          return argument[i].indexOf[x]>=0;
        });
        console.log(tempArray);
        insideArray.push[tempArray];
        }
        
      
    }
    
    


   return argument;
 }
  


uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);

//Basic solution... oh my freaking good why i havent think of checking the result array if the element exists than checking each argument array...

function uniteUnique(arr1, arr2, arr3) {
  // Creates an empty array to store our final result.
  var finalArray = [];

  // Loop through the arguments object to truly made the program work with two or more arrays
  // instead of 3.
  for (var i = 0; i < arguments.length; i++) {
    var arrayArguments = arguments[i];

    // Loops through the array at hand
    for (var j = 0; j < arrayArguments.length; j++) {
      var indexValue = arrayArguments[j];

      // Checks if the value is already on the final array.
      if (finalArray.indexOf(indexValue) < 0) {
        finalArray.push(indexValue);
      }
    }
  }

  return finalArray;
}

// test here
uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);

//Intermediate, same but less verbose 

function uniteUnique(arr) {
  var args = [...arguments];
  var result = [];
  for(var i = 0; i < args.length; i++) {
    for(var j = 0; j < args[i].length; j++) {
       if(!result.includes(args[i][j])) {
        result.push(args[i][j]);
      }
    }
  }
  return result;
}

uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);

//Advanced solution

function uniteUnique() {
  var concatArr = [];
  var i = 0;
  while (arguments[i]){
    concatArr = concatArr.concat(arguments[i]); i++;
  }
  uniqueArray = concatArr.filter(function(item, pos) {
    return concatArr.indexOf(item) == pos;
  });
  return uniqueArray;
}

// test here
uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);

//Number of arguments can change dynamically, so we donâ€™t need to bother providing our function uniteUnique() with arguments at all.
//We use a while loop to concatenate all the arguments into one array called concatArr.
//We use filter() to remove the duplicate elements by checking the index of each element and removing same elements with different positions.
//Ordering will be preserved here.

